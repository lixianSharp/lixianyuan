<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd ">

	<!-- 0.连接池属性设置读取指定的properties文件 -->
	<context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true"/>



	<!-- 1.将连接池放入spring容器 -->
	<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="driverClass" value="${jdbc.driver}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property> 
	</bean>
	
	
	
	<!--2. 配置 Mybatis的会话工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 配置Mybatis的核心 配置文件所在位置 -->
		<property name="configLocation" value="classpath:SqlMapConfig.xml" />
        <!-- 注意其他配置 -->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <!--使用下面的方式配置参数，一行配置一个 -->
                        <value>
                           	 helperDialect=mysql
                             reasonable=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
	</bean>
	
	
	
	 <!-- 3.2通过MapperScannerConfigurer扫描进行批量生成代理对象
	 	遵循规范:mapper.java和mapper.xml名字一样且在同一个目录下
		自动扫描出来的代理对象的id为mapper类类名（首字母小写）	 
	 -->
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	     <!-- 指定扫描的包名，如果有多个，用半角逗号分隔 -->
	     <property name="basePackage" value="lixianyuan.mapper"></property>
	     <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	 </bean>
	 
	 
	<!-- 4.配置事务管理器 -->
	<!-- 事务核心管理器，封装了事务操作，依赖于连接池 -->
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	    <property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 5.开启注解管理aop事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>


	<!-- 6.开启注解AOP (前提是引入aop命名空间和相关jar包) -->
	<aop:aspectj-autoproxy expose-proxy="true" proxy-target-class="true"></aop:aspectj-autoproxy>

    <!-- 7.开启aop，对类代理强制使用cglib代理 -->
    <aop:config proxy-target-class="true"></aop:config>

	<!-- 8.扫描 @Service @Component 注解-->
	<context:component-scan base-package="lixianyuan" >
		<!-- 不扫描 @Controller的类 -->
		<context:exclude-filter type="annotation"
								expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

</beans>